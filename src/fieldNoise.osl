#include "math.h"

shader fieldNoise
    [[ string as_node_name = "Generate noise vector field"
    ,  string as_classification = "utility" ]]
(
    string inNoise = "perlin"
    [[ string label = "noise base",
      string widget = "popup",
      string options = "perlin|simplex" ]],

    string inMode = "add"
    [[ string label = "processing",
       string widget = "popup",
       string options = "multiply|add" ]],

    int inOctaves = 1
    [[ string label = "octaves",
       string widget = "slider" ]],

    vector inFrequency = vector(1,1,1)
    [[ string label = "frequency"]],

    float inOffset = 1
    [[ string label = "offset" ]],

    float inLacunarity = 2.13
    [[ string label = "lacunarity"]],

    float inH = 1
    [[ string label = "H"]],

    float inContrast = 0
    [[
        string label = "contrast",
        float min = -10,
        float max = 10
    ]],

    point inP = P
    [[ string label = "input coords" ]],

    string inSlope = "signed"
    [[ string label = "output slope",
       string widget = "popup",
       string options = "signed|unsigned" ]],

    output vector outVec = 0,
){
    vector offset = inOffset * normalize(inFrequency);
    point pos = inP*inFrequency;
    if (inMode == "multiply") {
        vector vec = vector(1.0);

        for(int i=0; i< inOctaves; ++i) {
            vec *= (( (vector) noise(inNoise, pos) ) + offset)
                    * pow( inLacunarity, -inH*i);
            pos *= inLacunarity;
        }
        outVec = vec;
    } else if (inMode == "add") {
        vector vec = vector(0.0);

        for(int i=0; i< inOctaves; ++i) {
            vec += ( (vector) noise(inNoise, pos))
                    * pow( inLacunarity, -inH*i);
            pos *= inLacunarity;
        }
        outVec = vec;
    }

    // limit output coordinates to [0 .. 1]
    outVec = sigmoid(exp(inContrast) * outVec);

    // default is (inSlope == "unsigned")
    if (inSlope == "signed") {
        outVec = 2*outVec - vector(1);
    }
}
