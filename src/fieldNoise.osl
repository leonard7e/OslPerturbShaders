#include "math.h"

// Basic Noise
vector basic_noise_multiply(
  string noise_method,
  point pos,
  int octaves,
  vector offset,
  float lacunarity,
  float H
)
{
  vector vec = vector(1.0);

  for(int i=0; i< octaves; ++i) {
    vec *= (( (vector) noise(noise_method, pos) ) + offset)
    - pow( lacunarity, -H*i);
    pos *= lacunarity;
  }
  return vec;
}

vector basic_noise_add(
  string noise_method,
  point pos,
  int octaves,
  float lacunarity,
  float H
  )
{
  vector vec = vector(1.0);

  for(int i=0; i< octaves; ++i) {
    vec += ( (vector) noise(noise_method, pos))
             * pow( lacunarity, -H*i);
    pos *= lacunarity;
  }
  return vec;
}



shader fieldNoise
    [[ string as_node_name = "Generate noise vector field"
    ,  string as_classification = "utility" ]]
(
    string inNoise = "perlin"
    [[ string label = "noise base",
      string widget = "popup",
      string options = "perlin|simplex" ]],

    int inSeed = 0
    [[ string label = "seed",
       string widget = "slider" ]],

    string inCombination = "add"
    [[ string label = "combination method",
       string widget = "popup",
       string options = "multiply|add" ]],

    int inOctaves = 1
    [[ string label = "octaves",
       string widget = "slider" ]],

    vector inFrequency = vector(1,1,1)
    [[ string label = "frequency"]],

    float inOffset = 1
    [[ string label = "offset" ]],

    float inLacunarity = 2.13
    [[ string label = "lacunarity"]],

    float inH = 1
    [[ string label = "H"]],

    point inP = P
    [[ string label = "input coords" ]],

    output vector outVec = 0,
){
    vector offset = inOffset * normalize(inFrequency);
    point pos = inP*inFrequency;

    if (inCombination == "multiply") {
      outVec = basic_noise_multiply( inNoise, pos,
        inOctaves, offset,
        inLacunarity, inH
      );
    } else if (inCombination == "add") {
        outVec = basic_noise_add( inNoise, pos,
          inOctaves,
          inLacunarity, inH
        );
    }
}
