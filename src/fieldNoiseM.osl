#include "math.h"


shader fieldNoiseM
    [[ string as_node_name = "Generate noise vector field"
    ,  string as_classification = "utility" ]]
(
    matrix in_Transform =
       matrix(1)
    [[ string label = "Matrix" ]],

    int in_Octaves = 1
    [[ string label = "Octaves",
       string widget = "slider",
       int min = 0,
       int max = 8 ]],

    vector in_Frequency = vector(1,1,1)
    [[ string label = "Frequency"]],

    vector in_Lacunarity = 2.13
    [[ string label = "Lacunarity"]],

    float in_Sharpness = 1
    [[
        string label = "Sharpness",
        float min = -10,
        float max = 10
    ]],

    point in_P = P
    [[ string label = "Input Coordinates" ]],

    string in_OutputMode = "Signed"
    [[ string label = "output to",
       string widget = "popup",
       string options = "Signed|Unsigned" ]],

    output vector outVec = 0,
){
    point pos = in_P*in_Frequency;
    matrix H = matrix(1);

    // --
    vector vec = vector(0);

    for(int i=0; i< in_Octaves; ++i) {
        H = in_Transform * H;

        vector displ = vec + noise("perlin", pos);

        vec += in_Lacunarity * transform(H, displ);

        pos = pos * in_Lacunarity;
    }

    // limit output coordinates to [0 .. 1]
    outVec = sigmoid(exp(in_Sharpness) * vec);

    // default is (in_OutputMode == "Unsigned")
    if (in_OutputMode == "Signed") {
        outVec = 2*outVec - vector(1);
    }
}


/*
*/
